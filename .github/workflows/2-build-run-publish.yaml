name: Build Run Publish Image

on:
  workflow_call:
    inputs:
      app_dir:
        required: false
        type: string
        default: ${{ vars.APP_DIR }}
      image_name:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      image_tag:
        required: false
        type: string
        default: ${{ github.event.release.tag_name }}
      container_name:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      runner:
        required: false
        type: string
        default: ${{ vars.RUNNER }}
    secrets:
      aws-access-key-id: 
        required: true
      aws-secret-access-key: 
        required: true
      aws-region: 
        required: true
      aws-ecr-repository: 
        required: true
      docker-username: 
        required: true
      docker-password: 
        required: true
      docker-repository: 
        required: true

jobs:

  build-image-job:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Build Docker Image
        working-directory: ${{ inputs.app_dir }}
        run: |
          docker build . --no-cache --tag ${{ inputs.image_name }}:${{ inputs.image_tag }}
        
      - name: Check if Docker image exists
        run: |
          docker images
          if docker images --format '{{.Repository}}:{{.Tag}}' | grep -q ${{ inputs.image_name }}; then
            echo "Docker image exists."
          else
            echo "Docker image does not exist."
            exit 1
          fi
      
      - name: Run Image in Container
        run: docker run -d --name ${{ inputs.container_name }} ${{ inputs.image_name }}:${{ inputs.image_tag }}
      
      - name: Check if Docker container exists
        run: |  
          if docker ps -a --format '{{.Names}}' | grep -q ${{ inputs.container_name }}; then
            if docker inspect -f '{{.State.Running}}' ${{ inputs.container_name }} | grep -q 'true'; then
                echo "Container is running."
                docker ps -a
            else
                echo "Container exists and is stopped."
                docker ps -a
                exit 1
            fi
          else
              echo "Container does not exist."
              docker ps -a
              exit 1
          fi
      - name: Check if Docker container exists AND Runing
        run: |  
          if docker ps -a --format '{{.Names}}' | grep -q ${{ inputs.container_name }}; then
            if docker inspect -f '{{.State.Running}}' ${{ inputs.container_name }} | grep -q 'true'; then
              echo "Container is running."
              docker ps -a
            else
              echo "Container exists but is stopped."
              docker ps -a
              exit 1
            fi
          else
            echo "Container does not exist."
            docker ps -a
            exit 1
          fi
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ secrets.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Publish to repository
        run: |
          docker tag ${{ inputs.image_name }}:${{ inputs.image_tag }} ${{ secrets.aws-ecr-repository }}:${{ inputs.image_tag }}
          docker push ${{ secrets.aws-ecr-repository }}:${{ inputs.image_tag }}
      
      - name: Publish to repository as "latest"
        run: |
          docker tag ${{ secrets.aws-ecr-repository }}:${{ inputs.image_tag }} ${{ secrets.aws-ecr-repository }}:$VERSION
          docker push ${{ secrets.aws-ecr-repository }}:$VERSION
        env:
          VERSION: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}

      - name: Publish to repository
        run: |
          docker tag ${{ inputs.image_name }}:${{ inputs.image_tag }} ${{ secrets.docker-repository }}:${{ inputs.image_tag }}
          docker push ${{ secrets.docker-repository }}:${{ inputs.image_tag }}
      
      - name: Publish to repository as "latest"
        run: |
          docker tag ${{ secrets.docker-repository }}:${{ inputs.image_tag }} ${{ secrets.docker-repository }}:$VERSION
          docker push ${{ secrets.docker-repository }}:$VERSION
        env:
          VERSION: latest


